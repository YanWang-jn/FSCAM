devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document(roclets=c('rd', 'collate', 'namespace'))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?FSCAM
?preprocess
?Cluestimate
?SCC_FSCAM
?FSCAM
devtools::document()
?preprocess
?preprocess
?SCC_FSCAM
?FSCAM
?Cluestimate
?SCC_FSCAM
devtools::document()
?preprocess
?preprocess
?Cluestimate
?FSCAM
?SCC_FSCAM
check()
library(devtools)
library(roxygen2)
check()
?preprocess
?FSCAM
check()
devtools::document()
check()
devtools::document()
check()
load("D:/生物信息/基于凸集分析和信息熵的改良参考成分分析方法/结果/金标准数据集/GSE57249_Biase1_Smart_seq/GSE57249(7).RData")
preprocess(data)
preprocess(data0)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
check()
links <- readRDS("C:/Users/王彦/Desktop/FSCAM/Meta/links.rds")
links
devtools::document()
devtools::document()
devtools::document()
library(FSCAM)
library(FSCAM)
load("D:/生物信息/基于凸集分析和信息熵的改良参考成分分析方法/结果/金标准数据集/GSE57249_Biase1_Smart_seq/GSE57249(7).RData")
saveRDA(data0,"D:/FSCAM/FSCAM/data/lpsdata.RDA")
save(data0,"D:/FSCAM/FSCAM/data/lpsdata.RDA")
save(data0,"D:/FSCAM/FSCAM/data/lpsdata.rda")
save(data0,file="D:/FSCAM/FSCAM/data/lpsdata.rda")
library(FSCAM)
data(lpsdata)
load("D:/生物信息/基于凸集分析和信息熵的改良参考成分分析方法/结果/金标准数据集/GSE57249_Biase1_Smart_seq/GSE57249(7).RData")
lpsdata=data0
save(lpsdata,file="D:/FSCAM/FSCAM/data/lpsdata.rda")
save(lpsdata,file="D:/FSCAM/FSCAM/data/lpsdata.rda")
data(lpsdata)
force(data0)
View(data0)
load("D:/生物信息/基于凸集分析和信息熵的改良参考成分分析方法/结果/金标准数据集/GSE57249_Biase1_Smart_seq/GSE57249(7).RData")
lpsdata=data0
View(lpsdata)
save(lpsdata,file="D:/FSCAM/FSCAM/data/lpsdata.rda")
data(lpsdata)
force(data0)
procdata = preprocess(lpsdata, takenormalize=TRUE, clusternum=350)
procdata = preprocess(data0, takenormalize=TRUE, clusternum=350)
K_opt = Cluestimate(procdata, K_max=20)
library("factoextra")
library("factoextra")
K_opt = Cluestimate(procdata, K_max=20)
library("psych")
K_opt = Cluestimate(procdata, K_max=20)
PC_num=fa.parallel(procdata[1],fa='pc',n.iter = 100,show.legend = F,main = 'Scree plot with parallel analysis')
K_opt = Cluestimate(procdata, K_max=20)
data=as.matrix(procdata[1])
PC_num=fa.parallel(data,fa='pc',n.iter = 100,show.legend = F,main = 'Scree plot with parallel analysis')
data=matrix(procdata[1])
View(data)
View(data)
data=matrix(procdata[[1]])
procdata[[1]]
View(data)
data=as.matrix(procdata[[1]])
K_opt = Cluestimate(procdata, K_max=20)
data=as.matrix(procdata[[1]])
PC_num=fa.parallel(data,fa='pc',n.iter = 100,show.legend = F,main = 'Scree plot with parallel analysis')
if (dim(data)[1]>dim(data)[2]){
car.pr1= principal(data,nfactors = PC_num[["ncomp"]],rotate = 'varimax')
b=round(unclass(car.pr1$weights),PC_num[["ncomp"]])
}else{
car.pr1= princomp(data)
b=car.pr1$loadings[,1:PC_num[["ncomp"]]]
}
K_opt=fviz_nbclust(b, kmeans,k.max = K_max, method = "silhouette")
K_max=20
K_opt=fviz_nbclust(b, kmeans,k.max = K_max, method = "silhouette")
View(K_opt)
which(K_opt[["data"]][["y"]]==max(K_opt[["data"]][["y"]]))
K_opt=which(K_opt[["data"]][["y"]]==max(K_opt[["data"]][["y"]]))
K_opt = Cluestimate(procdata, K_max=20)
dim(data)[2]
data=as.matrix(procdata[[1]])
PC_num=fa.parallel(data,fa='pc',n.iter = 100,show.legend = F,main = 'Scree plot with parallel analysis')
if (dim(data)[1]>dim(data)[2]){
car.pr1= principal(data,nfactors = PC_num[["ncomp"]],rotate = 'varimax')
b=round(unclass(car.pr1$weights),PC_num[["ncomp"]])
}else{
car.pr1= princomp(data)
b=car.pr1$loadings[,1:PC_num[["ncomp"]]]
}
K_opt=fviz_nbclust(b, kmeans,k.max = K_max, method = "silhouette")
K_opt=which(K_opt[["data"]][["y"]]==max(K_opt[["data"]][["y"]]))
library(FSCAM)
K_opt = Cluestimate(procdata, K_max=20)
K_opt=0
K_opt = Cluestimate(procdata, K_max=20)
gene_cluster=as.matrix(procdata[[2]])
View(gene_cluster)
data=as.matrix(procdata[[1]])
genename=rownames(gene_cluster)
landmark=kmeans(t(procdata),K)
gene_cluster=as.matrix(procdata[[2]])
data=as.matrix(procdata[[1]])
genename=rownames(gene_cluster)
landmark=kmeans(t(data),K)
K=3
if(is.null(K)){
K= Cluestimate(data)
}
landmark=kmeans(t(data),K)
landmark_cluster=as.matrix(landmark$cluster)
templandmark=aggregate(as.matrix(t(data),nrow=dim(procdata)[2],ncol=dim(data)[1]) ,by=list(landmark_cluster),FUN=mean)
templandmark=t(templandmark[,-1])
marker_gene=matrix(numeric(0), 0,0)
ceiling(K/2)
sample1=1:K
sample1=sample(sample1,2)
templandmark1=templandmark[,sample1]
J <- dim(templandmark1)[1]
cluster1=as.matrix(templandmark1)
convex <- convhulln(rbind(templandmark1,0))
corner <- matrix(numeric(0), 0,0)
library("MASS")
convex <- convhulln(rbind(templandmark1,0))
library("convhulln")
library("geometry")
convex <- convhulln(rbind(templandmark1,0))
convex <- convhulln(rbind(templandmark1,0))
corner <- matrix(numeric(0), 0,0)
for (i in 1:2){
corner <- union(corner,convex[,i])
}
for (j in 1:length(corner)){
if (corner[j]==(J+1)){
break
}
}
corner <- corner[-j]  # throw away the origin point
J_out <- length(corner)
##### estimate A and S ###########
cat("\nEstimating A and S ... \n")
cornerResult <- FOA_measure_convex(t(templandmark1[corner,]),2)
ind <- cornerResult[[1]]
measure_corner=corner[ind==1]
for(i in 1:dim(matrix(measure_corner))[1])
{
marker_gene=c(marker_gene,genename[which(gene_cluster==measure_corner[i])])
}
sample1=1:K
sample1=sample(sample1,2)
templandmark1=templandmark[,sample1]
J <- dim(templandmark1)[1]
cluster1=as.matrix(templandmark1)
convex <- convhulln(rbind(templandmark1,0))
corner <- matrix(numeric(0), 0,0)
for (i in 1:2){
corner <- union(corner,convex[,i])
}
for (j in 1:length(corner)){
if (corner[j]==(J+1)){
break
}
}
corner <- corner[-j]  # throw away the origin point
J_out <- length(corner)
##### estimate A and S ###########
cat("\nEstimating A and S ... \n")
cornerResult <- FOA_measure_convex(t(templandmark1[corner,]),2)
ind <- cornerResult[[1]]
measure_corner=corner[ind==1]
for(i in 1:dim(matrix(measure_corner))[1])
{
marker_gene=c(marker_gene,genename[which(gene_cluster==measure_corner[i])])
}
procdata_c=procdata[[1:2]]
procdata_c=list(procdata[[1]],procdata[[2]])
View(procdata_c)
procdata_uc=as.matrix(procdata[[3]])
library(FSCAM)
library(FSCAM)
procdata=preprocess(data0)
procdata_c=list(procdata[[1]],procdata[[2]])
procdata_uc=as.matrix(procdata[[3]])
if (is.null){
K=Cluestimate(procdata_c)
}
if (is.null(K)){
K=Cluestimate(procdata_c)
}
rescult=matrix(numeric(0), 0,0)
rescult=matrix(numeric(0), 0,0)
for (i in 1:T){
try({
rescult=c(rescult,FSCAM(procdata_c,K))
})
}
T=20
rescult=matrix(numeric(0), 0,0)
for (i in 1:T){
try({
rescult=c(rescult,FSCAM(procdata_c,K))
})
}
precise_g=matrix(numeric(0), 0,0)
for (k in 1:(length(rescult))){
precise_g=c(precise_g,rescult[[k]])
}
precise_g_score=table(precise_g)
precise_g_score=sort(precise_g_score,decreasing = T)
precise_select_g=precise_g_score[(precise_g_score!=1)]
precise_g=matrix(numeric(0), 0,0)
for (k in 1:(length(rescult))){
precise_g=c(precise_g,rescult[[k]])
}
precise_g_score=table(precise_g)
precise_g_score=sort(precise_g_score,decreasing = T)
precise_g_score=table(precise_g)
View(precise_g_score)
precise_g_score=as.vector(table(precise_g))
precise_g_score=sort(precise_g_score,decreasing = T)
rescult=matrix(numeric(0), 0,0)
for (i in 1:T){
try({
rescult=c(rescult,FSCAM(procdata_c,K))
})
}
rescult=matrix(numeric(0), 0,0)
for (i in 1:T){
try({
rescult=c(rescult,FSCAM(procdata_c,K))
})
}
precise_g=matrix(numeric(0), 0,0)
for (k in 1:(length(rescult))){
precise_g=c(precise_g,rescult[[k]])
}
precise_g_score=table(precise_g)
precise_g_score=sort(precise_g_score,decreasing = T)
precise_g_score=sort(precise_g_score,decreasing = TRUE)
precise_select_g=precise_g_score[(precise_g_score!=1)]
a=data.frame(procdata_uc[names(precise_select_g),])
feature_set=names(precise_select_g)
kp<-pam(t(a),k=K,metric="spearman",stand = TRUE)
library(cluster)
cell_label=kp$clustering
kp<-pam(t(a),k=K,metric="spearman",stand = TRUE)
precise_select_g=precise_g_score[(precise_g_score!=1)]
a=data.frame(procdata_uc[names(precise_select_g),])
d = as.dist(1-cor(a,method="spearman"))
kp<- pamk(d,krang=Nfeature,diss = TRUE)
library(fpc)
kp<- pamk(d,krang=Nfeature,diss = TRUE)
kp<- pamk(d,krang=K,diss = TRUE)
feature_set=names(precise_select_g)
cell_label=kp$clustering
names(data0)=lpsdata
View(data0)
data(lpsdata)
devtools::document()
library(FSCAM)
devtools::document()
devtools::use_data()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
data(lpsdata)
library(FSCAM)
devtools::document()
library(FSCAM)
devtools::document()
devtools::document()
devtools::document()
devtools::use_data()
devtools::use_data()
usethis::use_data()
data(lpsdata)
usethis::use_data(lpsdata)
usethis::use_data(lpsdata，overwrite = TRUE)
usethis::use_data(lpsdata)
devtools::document()
check()
